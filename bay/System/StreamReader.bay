/*!
 * Bayrell Common Library
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellCommon.System;


class StreamReader extends CoreObject {
	
	protected StreamInterface stream = null;
	protected string charset = "ucs2";
	
	
	/**
	 * Create object
	 */
	public void constructor(StreamInterface stream, string charset="ucs2"){
		this.stream = stream;
		this.charset = charset;
	}
	
	
	
	/**
	 * Returns current stream
	 */
	public StreamInterface getStream(){
		return this.stream;
	}
	
	
	
	/**
	 * Returns current stream
	 */
	public string getCharset(){
		return this.charset;
	}
	
	
	
	/**
	 * Read next char from stream
	 * @return char
	 */
	public char readChar(){
		
	}
	
	
	
	/**
	 * Read string from stream
	 * @param int 
	 * @return string
	 */
	public string readString(int length){
		string s = "";
		int i=0;
		while (!this.stream.isEOF() and i < length){
			s ~= this.readChar();
			i++;
		}
		return s;
	}
	
	
	
	/**
	 * Read line from stream
	 * @return string
	 */
	public string readLine(){
		string s = "";
		char ch = this.readChar();
		while (!this.stream.isEOF() and ch != "\n"){
			s ~= ch;
			ch = this.readChar();
		}
		return s;
	}
	
	
	
	/**
	 * Read all content from stream
	 */
	public string readAll(int buffer_length = 4096){
		Vector<byte> res = new Vector();
		while (){
			Vector<byte> buffer = this.stream.readBytes(buffer_length);
			res.appendVector(buffer);
			delete buffer;
		}
		string s = Utils::bytesToString(res, this.charset);
		delete res;
		return s;
	}
	
}